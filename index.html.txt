<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SVG Drawing Tool</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h2><b>SVG Drawing Tool</b></h2>
    <svg id="drawingArea" width="600" height="400"></svg>
    <div class="controls">
      <label for="colorPicker"><b>Stroke Color:</b></label>
      <input type="color" id="colorPicker" value="#0000ff">
      <button id="clearBtn">Clear Canvas</button>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>


body {
  font-family: Arial, sans-serif;
}

.container {
  border: 2px solid #555;
  padding: 10px;
  display: inline-block;
}

svg {
  border: 1px solid black;
  background-color: #f9f9f9;
  cursor: crosshair;
}

.controls {
  margin-top: 10px;
  display: flex;
  gap: 10px;
  align-items: center;
}

button {
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  background-color: #007BFF;
  color: white;
}

button:hover {
  background-color: #0056b3;
}

label {
  font-size: 14px;
}


const svg = document.getElementById("drawingArea");
const clearBtn = document.getElementById("clearBtn");
const colorPicker = document.getElementById("colorPicker");

let drawing = false;
let currentPath = null;
let strokeColor = colorPicker.value;

// Update stroke color on change
colorPicker.addEventListener("input", () => {
  strokeColor = colorPicker.value;
});

svg.addEventListener("mousedown", (e) => {
  drawing = true;
  const point = getMousePosition(e);
  currentPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  currentPath.setAttribute("stroke", strokeColor);
  currentPath.setAttribute("stroke-width", "2");
  currentPath.setAttribute("fill", "none");
  currentPath.setAttribute("d", `M ${point.x} ${point.y}`);
  svg.appendChild(currentPath);
});

svg.addEventListener("mousemove", (e) => {
  if (!drawing) return;
  const point = getMousePosition(e);
  let d = currentPath.getAttribute("d");
  currentPath.setAttribute("d", `${d} L ${point.x} ${point.y}`);
});

svg.addEventListener("mouseup", () => {
  drawing = false;
  currentPath = null;
});

svg.addEventListener("mouseleave", () => {
  drawing = false;
  currentPath = null;
});

// Clear canvas
clearBtn.addEventListener("click", () => {
  while (svg.firstChild) {
    svg.removeChild(svg.firstChild);
  }
});

function getMousePosition(e) {
  const rect = svg.getBoundingClientRect();
  return {
    x: e.clientX - rect.left,
    y: e.clientY - rect.top
  };
}
